import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import metaApi, { PageStatus } from 'api/metaApi';
import { RootState } from '../store';
// import { fetchCount } from './counterAPI';

export interface AccountState {
  accountId?: string;
  status: 'logged' | 'notLogged';
  loadStatus: PageStatus;
}

const initialState: AccountState = {
  status: 'notLogged',
  loadStatus: 'pending',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(getByToken(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const restore = createAsyncThunk(
  'account/restore',
  async (token: string) => {
    const api = await metaApi.getInstance();
    const response = await api.auth.restore({ token });
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const accountSlice = createSlice({
  name: 'account',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    add: (
      state,
      action: PayloadAction<{
        accountId: string;
        status: AccountState['status'];
      }>
    ) => {
      state.accountId = action.payload.accountId;
      state.status = action.payload.status;
    },
  },
  extraReducers: (builder) => {
    builder
      .addCase(restore.pending, (state) => {
        state.loadStatus = 'pending';
      })
      .addCase(restore.fulfilled, (state, action) => {
        state.accountId = action.payload.id;
        state.status = 'logged';
        state.loadStatus = 'load';
      })
      .addCase(restore.rejected, (state) => {
        state.loadStatus = 'error';
      });
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
});

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const { add } = accountSlice.actions;
export const selectAccount = (state: RootState) => state.account;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.

export default accountSlice.reducer;
